name: 'Build, test and deploy OpenAtlas'
on:
  push: {}
jobs:
  setup_workflow_env:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.get_environment_from_git_ref.outputs.environment }}
      environment_short: ${{ steps.get_environment_from_git_ref.outputs.environment_short }}
      image_name: container-preview
      registry_root: ghcr.io/${{ github.repository }}/
      default_port: "5000"
      APP_NAME: oa
      APP_ROOT: "/"
    steps:
      - name: Get environment from git ref
        id: get_environment_from_git_ref
        run: |
          echo "Running on branch ${{ github.ref_name }}"
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=production"
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "environment_short=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=review/${{ github.ref_name }}"
            echo "environment=review/${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "environment_short=$(echo -n ${{ github.ref_name }} | sed s/feature_// | tr '_' '-' | tr '[:upper:]' '[:lower:]' )" >> $GITHUB_OUTPUT
          fi
  build_openatlas:
    needs: [setup_workflow_env]
    environment: ${{ needs.setup_workflow_env.outputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create tags based on git data
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ needs.setup_workflow_env.outputs.registry_root }}${{ needs.setup_workflow_env.outputs.image_name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{sha}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: install/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test_openatlas:
    env:
      POSTGRES_PASSWORD: verysecret
      POSTGRES_DB: openatlas_test
      POSTGRES_USER: openatlas
    runs-on: ubuntu-latest
    needs: [setup_workflow_env, build_openatlas]
    environment: ${{ needs.setup_workflow_env.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create openatlas network
        run: |
          docker network create --internal openatlas
          
      - name: Create postgis container
        run: |
          docker run -d -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD\
                        -e POSTGRES_DB=$POSTGRES_DB\
                        -e POSTGRES_USER=$POSTGRES_USER\
                        --name postgres --network openatlas\
                        postgis/postgis:13-3.3

      - name: Wait
        run: sleep 8

      - name: Initialize db
        run: |
          docker create -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD\
              -e POSTGRES_DB=$POSTGRES_DB\
              -e POSTGRES_USER=$POSTGRES_USER\
              -e POSTGRES_HOST=postgres\
              --name initdb --network openatlas\
              $(echo "${{ needs.setup_workflow_env.outputs.registry_root }}${{ needs.setup_workflow_env.outputs.image_name }}"| tr '[:upper:]' '[:lower:]'):${{ github.ref_name }}\
              /bin/bash -c 'if [ "$( psql postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:5432/$POSTGRES_DB -tAc "SELECT 1 FROM web.settings WHERE id = 1" )" == '"'"'1'"'"' ]; then echo '"'"'Database has already data'"'"'; else echo '"'"'Database has no data'"'"' && cd /var/www/openatlas/install && cat [0-9]_*.sql | psql postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:5432/$POSTGRES_DB -f -; fi' 
          docker start initdb

      - name: Create openatlas container and run tests
        run: |
          COOKIE_KEY=$(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c 32;echo;)
          echo "COOKIE_KEY=$COOKIE_KEY"
          docker create -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD\
                        -e POSTGRES_DB=$POSTGRES_DB\
                        -e POSTGRES_USER=$POSTGRES_USER\
                        -e POSTGRES_HOST=postgres\
                        -e COOKIE_KEY=$COOKIE_KEY\
                        --name openatlas --network openatlas\
                        $(echo "${{ needs.setup_workflow_env.outputs.registry_root }}${{ needs.setup_workflow_env.outputs.image_name }}"| tr '[:upper:]' '[:lower:]'):${{ github.ref_name }}
          set -x
          cat <<EOF > testing.py
          SERVER_NAME='local.host'
          DATABASE_NAME='openatlas_test'
          DATABASE_USER='openatlas'
          DATABASE_HOST='postgres'
          DATABASE_PORT=5432
          DATABASE_PASS='verysecret'
          MAIL_PASSWORD='asdQWEtzu123'
          SECRET_KEY='$COOKIE_KEY'  # Used for cookies
          DEBUG = True
          WTF_CSRF_ENABLED = False
          WTF_CSRF_METHODS: list[str] = []
          ARCHE = {
              'id': 0,
              'collection_ids': [0],
              'base_url': 'https://arche-curation.acdh-dev.oeaw.ac.at/',
              'thumbnail_url': 'https://arche-thumbnails.acdh.oeaw.ac.at/'}
          EOF
          # production.py is recreated on every start
          sudo chown 33:33 testing.py
          docker cp -a testing.py openatlas:/var/www/openatlas/instance/
          docker start openatlas
          until [ "$(docker inspect -f {{.State.Running}} openatlas)"=="true" ]; do
              sleep 0.1;
          done;
          docker exec -i openatlas /bin/bash -c 'psql postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:5432/$POSTGRES_DB -tAc "SELECT 1 FROM web.settings WHERE id = 1" )" == '"'"'1'"'"''
          docker exec -i openatlas /bin/bash -c "cd /var/www/openatlas/instance/ && ls -la && cat testing.py && cat production.py"

      - name: Run tests
        run: |
          docker exec -i openatlas /bin/bash -c "cd /var/www/openatlas/tests && nosetests3 -c .noserc --verbosity=2 --nologcapture --nocapture && echo passed"
  _3:
    needs: [setup_workflow_env, test_openatlas]
    uses: acdh-oeaw/gl-autodevops-minimal-port/.github/workflows/deploy-cluster-2.yml@main
    secrets: inherit
    with:
      environment: ${{ needs.setup_workflow_env.outputs.environment}}
      DOCKER_TAG: ${{ needs.setup_workflow_env.outputs.registry_root }}${{ needs.setup_workflow_env.outputs.image_name }}
      APP_NAME: ${{ needs.setup_workflow_env.outputs.APP_NAME }}-${{ needs.setup_workflow_env.outputs.environment_short }}
      APP_ROOT: ${{ needs.setup_workflow_env.outputs.APP_ROOT }}
      default_port: ${{ needs.setup_workflow_env.outputs.default_port}}
