from typing import Any, Optional

import requests
from flask import g

from openatlas import app
from openatlas.api.import_scripts.util import get_exact_match
from openatlas.models.entity import Entity
from openatlas.models.reference_system import ReferenceSystem
from openatlas.models.type import Type

from openatlas.database.reference_system import ReferenceSystem as Db


def import_vocabs_data(id_: str) -> int:
    hierarchies = fetch_top_level(id_, get_vocabs_reference_system())
    print(hierarchies)
    return 1


def fetch_top_level(
        id_: str,
        ref: Optional[ReferenceSystem] = None) -> list[dict[str, Any]]:
    req = requests.get(
        f"{app.config['VOCABS']['api_uri']}{app.config['VOCABS']['id']}/{id_}",
        timeout=60,
        auth=(app.config['VOCABS_USER'], app.config['VOCABS_PW'])
        # Todo: auth can be deleted if public
    )
    exact_match_id = get_exact_match().id
    hierarchies = []
    hierarchy = None
    for entry in req.json()[id_.lower()]:
        name = entry['uri'].rsplit('/', 1)[-1]
        if ref:
            hierarchy = Entity.insert('type', entry['label'])
            Type.insert_hierarchy(hierarchy, 'custom', ['artifact'], True)
            ref.link(
                'P67',
                hierarchy,
                name,
                type_id=exact_match_id)
        entry['subs'] = fetch_children(entry['uri'], hierarchy, ref)
        hierarchies.append(entry)
    return hierarchies


def fetch_children(
        uri: str,
        super_: Optional[Entity],
        ref: Optional[ReferenceSystem]) -> list[dict[str, Any]]:
    req = requests.get(
        f"{app.config['VOCABS']['api_uri']}"
        f"{app.config['VOCABS']['id']}/narrower",
        params={'uri': uri},
        timeout=60,
        auth=(app.config['VOCABS_USER'],
              app.config['VOCABS_PW']))  # Todo: auth can be deleted if public
    exact_match_id = get_exact_match().id
    children = []
    child = None
    for entry in req.json()['narrower']:
        name = entry['uri'].rsplit('/', 1)[-1]
        if super_ and ref:
            child = Entity.insert('type', entry['prefLabel'])
            child.link('P127', super_)
            ref.link('P67', child, name, type_id=exact_match_id)
        entry['subs'] = fetch_children(entry['uri'], child, ref)
        children.append(entry)
    return children


def get_vocabs_reference_system() -> ReferenceSystem:
    system = None
    for system_ in g.reference_systems.values():
        if system_.name == 'VOCABS':
            system = system_
    if not system:
        uri = app.config['VOCABS']['uri']
        system = ReferenceSystem.insert_system({
            'name': 'VOCABS',
            'description': 'VOCABS by ACDH-CH (autogenerated)',
            'website_url': uri,
            'resolver_url': f"{uri}/{app.config['VOCABS']['id']}/"})
    if 'artifact' not in system.classes:
        Db.add_classes(system.id, ['artifact'])
    return system
