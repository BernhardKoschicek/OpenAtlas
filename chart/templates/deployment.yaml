apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    {{- include "labels" . | nindent 4 }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
  name: {{ template "fullname" . }}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      {{- include "selectorLabels" . | nindent 6 }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        {{- include "selectorLabels" . | nindent 8 }}
    spec:
      affinity: {}
      containers:
        - env:
            - name: POSTGRES_HOST
              value: {{ .Values.postgis.host | default ( print ( include "fullname" . ) "-postgres" ) | quote }}
          envFrom:
{{- if eq .Values.postgis.deploy true }}
            - configMapRef:
                name: {{ template "fullname" . }}-configmap
                optional: false
            - secretRef:
                name: {{ template "fullname" . }}-secret
                optional: false
{{- end }}
            - secretRef:
                name: {{ .Release.Name }}
                optional: true
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" | quote }}
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: openatlas
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          startupProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /var/www/openatlas/files/uploads
              name: uploads
            - mountPath: /var/www/openatlas/files/processed_images/resized
              name: processed-images
            - mountPath: /var/www/openatlas/files/export/
              name: export
      dnsPolicy: ClusterFirst
      initContainers:
        - args:
            - chown  -R 33:33 /var/www/openatlas/files/
          command:
            - /bin/sh
            - '-c'
          image: busybox
          imagePullPolicy: IfNotPresent
          name: chown
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /var/www/openatlas/files/export/
              name: export
            - mountPath: /var/www/openatlas/files/processed_images/resized
              name: processed-images
            - mountPath: /var/www/openatlas/files/uploads
              name: uploads
        - args:
            - >-
              if [ "$( psql
              postgres://openatlas:$POSTGRES_PASSWORD@$POSTGRES_HOST:5432/$POSTGRES_DB
              -tAc "SELECT 1 FROM web.settings WHERE id = 1" )" == '1' ]; then
              echo 'Database has already data';  else cd
              /var/www/openatlas/install && cat [0-9]_*.sql | psql
              postgres://openatlas:$POSTGRES_PASSWORD@$POSTGRES_HOST:5432/$POSTGRES_DB
              -f -; fi
          command:
            - /bin/bash
            - '-c'
          env:
            - name: POSTGRES_HOST
              value: {{ .Values.postgis.host | default ( print ( include "fullname" . ) "-postgres" ) | quote }}
          envFrom:
{{- if eq .Values.postgis.deploy true }}
            - configMapRef:
                name: {{ template "fullname" . }}-configmap
                optional: false
            - secretRef:
                name: {{ template "fullname" . }}-secret
                optional: false
{{- end }}
            - secretRef:
                name: {{ .Release.Name }}
                optional: true
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: IfNotPresent
          name: initdb
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: uploads
          persistentVolumeClaim:
            claimName: {{ print ( include "fullname" . ) "-uploads"| quote }}
        - name: processed-images
          persistentVolumeClaim:
            claimName: {{ print ( include "fullname" . ) "-processed-images"| quote }}
        - name: export
          persistentVolumeClaim:
            claimName: {{ print ( include "fullname" . ) "-export"| quote }}
